url_yacht_hd <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data"
df_yacht_hd <- read.csv(url_yacht_hd,sep = "",header = F)
head(df_yacht_hd)
names(df_yacht_hd) <- c("Longitudinal_Position","Prismatic_Coefficient","LD_Ratio","BD_Ratio","LB_Ratio","Froude_number","Residuary_Resistance")
str(df_yacht_hd)
set.seed(1)
index_y_hd <- createDataPartition(df_yacht_hd$Residuary_Resistance, p = 0.8,list = F)
train_y_hd <- df_yacht_hd[index_y_hd,]
test_y_hd <- df_yacht_hd[-index_y_hd,]
linear_model_y_hd <- lm(Residuary_Resistance~.,data=train_y_hd)
summary(linear_model_y_hd)
summary_lm_y_hd<-summary(linear_model_y_hd)
anova(linear_model_y_hd)
names(summary_lm_y_hd)
cat("The R squared value of the model using train data is: ",summary_lm_y_hd$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_lm_y_hd$adj.r.squared)
cat("mean of residual square error using train dataset is: ",mean(summary_lm_y_hd$residuals^2))
cat("Root mean of residual square error using train dataset is: ",sqrt(mean(summary_lm_y_hd$residuals^2)))
cat("sum of residual square error using train dataset is: ",sum(summary_lm_y_hd$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_lm_y_hd$residuals^2)/241))
cat("F-statistic value using the train dataset with 6 predictors and 241 degrees of freedom is: ",summary_lm_y_hd$fstatistic)
plot(linear_model_y_hd,1)
predict_values_yhd <- predict(linear_model_y_hd,test_y_hd, interval="prediction")
head(predict_values_yhd[,1])
head(test_y_hd$Residuary_Resistance)
residuals_yhd <- test_y_hd$Residuary_Resistance - predict_values_yhd[,1]
RSS_v <-sum(residuals_yhd^2)
TSS_v <-sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2)
cat("Sum of residual square error of the test dataset is(RSS): ",sum(residuals_yhd^2))
cat("Mean of residual square error of the test dataset is: ",mean(residuals_yhd^2))
cat("Root mean of residual square error of the test dataset is: ",sqrt(mean(residuals_yhd^2)))
cat("Total sum of residual square error of the test dataset is(TSS): ",sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2))
cat("The R squared value of the test data is: ",(1-(RSS_v/TSS_v)))
cat("Residual standard error of the test data is: ",sqrt(RSS_v/53))
fit_ctrl_yhd <- trainControl(method = "boot", number = 1000)
fit_tr <- train(Residuary_Resistance~.,data=train_y_hd,trControl=fit_ctrl_yhd,method="glmboost")
fit_tr
names(fit_tr)
cat("Training RMSE Resampling results of bootstrap Linear Model: ",fit_tr$results$RMSE)
cat("Training Rsquared Resampling results of bootstrap Linear Model: ",fit_tr$results$Rsquared)
histogram(fit_tr$results$RMSE,xlab="RMSE")
cat("Mean RMSE for the model fit: ",mean(fit_tr$results$RMSE))
cat("Mean Rsquared for the model fit: ",mean(fit_tr$results$Rsquared))
Activity_test_yhd <- predict(fit_tr, newdata = test_y_hd)
head(test_y_hd$Residuary_Resistance)
head(Activity_test_yhd)
res_yhd_bs <- (Activity_test_yhd-test_y_hd$Residuary_Resistance)
mse_yhd_bs <- mean(res_yhd_bs^2)
cat("MSE of the test data using bootstrap model: ",mse_yhd_bs)
cat("RMSE of the test data using bootstrap model: ",sqrt(mse_yhd_bs))
RSS_v_boot <-sum(res_yhd_bs^2)
TSS_v_boot <-sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2)
cat("Rsquared value of the test data using bootstrap model: ",(1-(RSS_v_boot/TSS_v_boot)))
data(mtcars)
head(mtcars)
str(mtcars)
set.seed(100)
index_mtcars <- createDataPartition(mtcars$mpg, p = 0.8,list = F)
train_mtcars<- mtcars[index_mtcars,]
test_mtcars <- mtcars[-index_mtcars,]
mtcars$am <- factor(mtcars$am)
lm_mtcars <- lm(mpg~.,data=train_mtcars)
summary(lm_mtcars)
summary_mtcars <-summary(lm_mtcars)
cat("The R squared value of the model using train data is: ",summary_mtcars$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_mtcars$adj.r.squared)
cat("Mean of residual square error using train dataset is: ",mean(summary_mtcars$residuals^2))
cat("Sum of residual square error using train dataset is: ",sum(summary_mtcars$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_mtcars$residuals^2)/17))
cat("F-statistic value using the train dataset with 10 predictors and 17 degrees of freedom is: ",summary_mtcars$fstatistic)
names(lm_mtcars)
cat("Associated coefficient value for the feature wt is: ",lm_mtcars$coefficients[6])
cat("Associated coefficient value for the feature hp is: ",lm_mtcars$coefficients[4])
plot(lm_mtcars,1)
predicted_values_linear_mtcars <- predict(lm_mtcars,test_mtcars, interval="prediction")
predicted_values_linear_mtcars
test_mtcars$mpg
residuals_linear_mtcars <- test_mtcars$mpg - predicted_values_linear_mtcars[,1]
cat("Mean of residual square error of the test dataset using linear model is: ",mean(residuals_linear_mtcars^2))
grid_ridge=10^seq(10,-2,length=100)
x_ridge=model.matrix(mpg~.,mtcars)[,-1]
y_ridge=mtcars$mpg
ridge_mtcars=glmnet(x_ridge[index_mtcars,],y_ridge[index_mtcars],alpha=0,lambda=grid_ridge,thresh=1e-12)
plot(ridge_mtcars)
ridge_mtcars_min=cv.glmnet(x_ridge[index_mtcars,],y_ridge[index_mtcars],alpha=0,parallel=TRUE)
plot(ridge_mtcars_min)
names(ridge_mtcars_min)
cat("The minimum value obtained for lambda is: ",ridge_mtcars_min$lambda.min)
ridge_mc_predict=predict(ridge_mtcars,s=ridge_mtcars_min$lambda.min,newx=x_ridge[-index_mtcars,])
ridge_mc_predict
test_mtcars[,1]
cat("Out of sample test MSE using ridge regression is : ",mean((ridge_mc_predict-test_mtcars[,1])^2))
out_ridge=glmnet(x_ridge,y_ridge,alpha=0)
redge.coef=predict(out_ridge,type="coefficients",s=ridge_mtcars_min$lambda.min)
redge.coef
lm_mtcars$coefficients
data("swiss")
head(swiss)
str(swiss)
set.seed(1)
index_swiss <- createDataPartition(swiss$Fertility, p = 0.8,list = F)
train_swiss <- swiss[index_swiss,]
test_swiss <- swiss[-index_swiss,]
lm_swiss <- lm(Fertility~.,data=train_swiss)
summary(lm_swiss)
summary_swiss <-summary(lm_swiss)
cat("The R squared value of the model using train data is: ",summary_swiss$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_swiss$adj.r.squared)
cat("Mean of residual square error using train dataset is: ",mean(summary_swiss$residuals^2))
cat("Sum of residual square error using train dataset is: ",sum(summary_swiss$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_swiss$residuals^2)/33))
cat("F-statistic value using the train dataset with 5 predictors and 33 degrees of freedom is: ",summary_swiss$fstatistic)
names(lm_swiss)
cat("Associated coefficient value for the feature Education is: ",lm_swiss$coefficients[4])
cat("Associated coefficient value for the feature Catholic is: ",lm_swiss$coefficients[5])
cat("Associated coefficient value for the feature Infant.Mortality is: ",lm_swiss$coefficients[6])
plot(lm_swiss,1)
predicted_values_linear <- predict(lm_swiss,test_swiss, interval="prediction")
predicted_values_linear
test_swiss$Fertility
residuals_linear <- test_swiss$Fertility - predicted_values_linear[,1]
cat("Mean of residual square error of the test dataset using linear model is: ",mean(residuals_linear^2))
grid=10^seq(10,-2,length=100)
x=model.matrix(Fertility~.,swiss)[,-1]
y=swiss$Fertility
lasso_swiss=glmnet(x[index_swiss,],y[index_swiss],alpha=1,lambda=grid)
plot(lasso_swiss)
lasso_swiss_min=cv.glmnet(x[index_swiss,],y[index_swiss],alpha=1,parallel=TRUE)
plot(lasso_swiss_min)
names(lasso_swiss_min)
cat("The minimum value obtained for lambda is: ",lasso_swiss_min$lambda.min)
lasso_predict=predict(lasso_swiss,s=lasso_swiss_min$lambda.min,newx=x[-index_swiss,])
lasso_predict
test_swiss[,1]
cat("Out of sample test MSE using Lasso regression is : ",mean((lasso_predict-test_swiss[,1])^2))
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=lasso_swiss_min$lambda.min)[1:6,]
lasso.coef
lm_swiss$coefficients
library(plyr)
rm(list=ls())
library(plyr)
library(caret)
library("glmnet")
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
data_german_credit$V25 <- factor(data_german_credit$V25)
revalue(data_german_credit$V25, c('2'='0'))
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
####Logistic Regression
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit,family = binomial)
summary(logistic_german_credit)
names(logistic_german_credit)
residuals_german_credit <- logistic_german_credit$residuals
MSE_german_credit <- mean(residuals_german_credit^2)
RMSE_german_credit <- sqrt(MSE_german_credit)
RSquared_german_ct <- 1-(logistic_german_credit$deviance/logistic_german_credit$null.deviance)
#### K fold cross validation
K_10_german_ct <- trainControl(method="cv", number=10)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
summary(Model_K_10_gt)
names(Model_K_10_gt)
predict_gt_K10 <- predict(Model_K_10_gt, newdata = test_german_credit)
rm(list=ls())
library(plyr)
library(caret)
library("glmnet")
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
data_german_credit$V25 <- factor(data_german_credit$V25)
#revalue(data_german_credit$V25, c('2'='0'))
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
####Logistic Regression
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
names(logistic_german_credit)
rm(list=ls())
library(plyr)
library(caret)
library("glmnet")
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
#data_german_credit$V25 <- factor(data_german_credit$V25)
#revalue(data_german_credit$V25, c('2'='0'))
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
####Logistic Regression
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
names(logistic_german_credit)
rm(list=ls())
library(caret)
library("glmnet")
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
names(logistic_german_credit)
plot(logistic_german_credit,1)
RSquared_german_ct <- 1-(logistic_german_credit$deviance/logistic_german_credit$null.deviance)
residuals_german_credit <- logistic_german_credit$residuals
MSE_german_credit <- mean(residuals_german_credit^2)
RMSE_german_credit <- sqrt(MSE_german_credit)
cat("Residual standard error using train dataset is: ",sqrt(sum(residuals_german_credit^2)/logistic_german_credit$df.residual))
cat("The R squared value of the model using train data is: ",RSquared_german_ct)
cat("Mean of residual square error using train dataset is: ",MSE_german_credit)
cat("Sum of residual square error using train dataset is: ",sum(residuals_german_credit^2))
cat("Root Mean of residual square error using train dataset is: ",sqrt(MSE_german_credit))
predict_german_ct_tt <- predict(logistic_german_credit,test_german_credit, interval="prediction")
residual_gc_test_lin <- predict_german_ct_tt - test_german_credit$V25
MSE_gc_test_lin <- mean(residual_gc_test_lin^2)
RMSE_gc_test_lin <- sqrt(MSE_gc_test_lin)
RSS_gc_test_lin <- sum(residual_gc_test_lin^2)
TSS_gc_test_lin <- sum((test_german_credit$V25-mean(test_german_credit$V25))^2)
cat("The R squared value of the model using test data is: ",1-(RSS_gc_test_lin/TSS_gc_test_lin))
cat("Mean of residual square error using test dataset is: ",MSE_gc_test_lin)
cat("Root Mean of residual square error using train dataset is: ",RMSE_gc_test_lin)
cat("Sum of residual square error using train dataset is: ",RSS_gc_test_lin)
cat("Residual standard error using train dataset is: ",sqrt(RSS_gc_test_lin/189))
K_10_german_ct <- trainControl(method="cv", number=10)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
Model_K_10_gt
names(Model_K_10_gt)
K_10_german_ct <- trainControl(method="cv", number=10,verboseIter = TRUE)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
Model_K_10_gt
names(Model_K_10_gt)
cat("Mean RMSE for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$RMSE))
cat("Mean Rsquare for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$Rsquared))
K_10_german_ct <- trainControl(method="cv", number=10)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
Model_K_10_gt
names(Model_K_10_gt)
cat("Mean RMSE for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$RMSE))
cat("Mean Rsquare for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$Rsquared))
pct_k10_tst <- predict(Model_K_10_gt, newdata = test_german_credit)
res_k10_tst <- pct_k10_tst - test_german_credit$V25
cat("Mean of residual square error of the K10 cv model using test dataset is: ",mean(res_k10_tst^2))
cat("Root Mean of residual square error of the K10 cv model using test dataset is: ",sqrt(mean(res_k10_tst^2)))
cat("Sum of residual square error using of the K10 cv model test dataset is: ",sum(res_k10_tst^2))
RSS_K10_tst <- sum(res_k10_tst)
RSS_K10_tst <- sum(res_k10_tst^2)
TSS_K10_tst <- sum((test_german_credit$V25 - mean(test_german_credit$V25))^2)
cat("The R squared value of the K10 cv model using test data is: ",1-(RSS_K10_tst/TSS_K10_tst))
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
names(logistic_german_credit)
RSquared_german_ct <- 1-(logistic_german_credit$deviance/logistic_german_credit$null.deviance)
residuals_german_credit <- logistic_german_credit$residuals
MSE_german_credit <- mean(residuals_german_credit^2)
RMSE_german_credit <- sqrt(MSE_german_credit)
cat("The R squared value of the model using train data is: ",RSquared_german_ct)
cat("Mean of residual square error using train dataset is: ",MSE_german_credit)
cat("Root Mean of residual square error using train dataset is: ",sqrt(MSE_german_credit))
cat("Sum of residual square error using train dataset is: ",sum(residuals_german_credit^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(residuals_german_credit^2)/logistic_german_credit$df.residual))
predict_german_ct_tt <- predict(logistic_german_credit,test_german_credit, interval="prediction")
residual_gc_test_lin <- predict_german_ct_tt - test_german_credit$V25
MSE_gc_test_lin <- mean(residual_gc_test_lin^2)
RMSE_gc_test_lin <- sqrt(MSE_gc_test_lin)
RSS_gc_test_lin <- sum(residual_gc_test_lin^2)
TSS_gc_test_lin <- sum((test_german_credit$V25-mean(test_german_credit$V25))^2)
cat("The R squared value of the model using test data is: ",1-(RSS_gc_test_lin/TSS_gc_test_lin))
cat("Mean of residual square error using test dataset is: ",MSE_gc_test_lin)
cat("Root Mean of residual square error using test dataset is: ",RMSE_gc_test_lin)
cat("Sum of residual square error using test dataset is: ",RSS_gc_test_lin)
cat("Residual standard error using test dataset is: ",sqrt(RSS_gc_test_lin/189))
K_10_german_ct <- trainControl(method="cv", number=10)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
Model_K_10_gt
names(Model_K_10_gt)
cat("Mean RMSE for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$RMSE))
cat("Mean Rsquare for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$Rsquared))
pct_k10_tst <- predict(Model_K_10_gt, newdata = test_german_credit)
res_k10_tst <- pct_k10_tst - test_german_credit$V25
RSS_K10_tst <- sum(res_k10_tst^2)
TSS_K10_tst <- sum((test_german_credit$V25 - mean(test_german_credit$V25))^2)
cat("Mean of residual square error of the K10 cv model using test dataset is: ",mean(res_k10_tst^2))
cat("Root Mean of residual square error of the K10 cv model using test dataset is: ",sqrt(mean(res_k10_tst^2)))
cat("Sum of residual square error using of the K10 cv model test dataset is: ",sum(res_k10_tst^2))
cat("The R squared value of the K10 cv model using testset data is: ",1-(RSS_K10_tst/TSS_K10_tst))
rm(list=ls())
library(glmnet)
library(caret)
library(plyr)
setwd("E:/IIT CHICAGO STUDIES/IIT Chicago semester 2/Data Prep and Analysis/Assignment/Assignment3")
url_yacht_hd <- "http://archive.ics.uci.edu/ml/machine-learning-databases/00243/yacht_hydrodynamics.data"
df_yacht_hd <- read.csv(url_yacht_hd,sep = "",header = F)
head(df_yacht_hd)
names(df_yacht_hd) <- c("Longitudinal_Position","Prismatic_Coefficient","LD_Ratio","BD_Ratio","LB_Ratio","Froude_number","Residuary_Resistance")
str(df_yacht_hd)
set.seed(1)
index_y_hd <- createDataPartition(df_yacht_hd$Residuary_Resistance, p = 0.8,list = F)
train_y_hd <- df_yacht_hd[index_y_hd,]
test_y_hd <- df_yacht_hd[-index_y_hd,]
linear_model_y_hd <- lm(Residuary_Resistance~.,data=train_y_hd)
summary(linear_model_y_hd)
summary_lm_y_hd<-summary(linear_model_y_hd)
anova(linear_model_y_hd)
names(summary_lm_y_hd)
cat("The R squared value of the model using train data is: ",summary_lm_y_hd$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_lm_y_hd$adj.r.squared)
cat("mean of residual square error using train dataset is: ",mean(summary_lm_y_hd$residuals^2))
cat("Root mean of residual square error using train dataset is: ",sqrt(mean(summary_lm_y_hd$residuals^2)))
cat("sum of residual square error using train dataset is: ",sum(summary_lm_y_hd$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_lm_y_hd$residuals^2)/241))
cat("F-statistic value using the train dataset with 6 predictors and 241 degrees of freedom is: ",summary_lm_y_hd$fstatistic)
plot(linear_model_y_hd,1)
predict_values_yhd <- predict(linear_model_y_hd,test_y_hd, interval="prediction")
head(predict_values_yhd[,1])
head(test_y_hd$Residuary_Resistance)
residuals_yhd <- test_y_hd$Residuary_Resistance - predict_values_yhd[,1]
RSS_v <-sum(residuals_yhd^2)
TSS_v <-sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2)
cat("Sum of residual square error of the test dataset is(RSS): ",sum(residuals_yhd^2))
cat("Mean of residual square error of the test dataset is: ",mean(residuals_yhd^2))
cat("Root mean of residual square error of the test dataset is: ",sqrt(mean(residuals_yhd^2)))
cat("Total sum of residual square error of the test dataset is(TSS): ",sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2))
cat("The R squared value of the test data is: ",(1-(RSS_v/TSS_v)))
cat("Residual standard error of the test data is: ",sqrt(RSS_v/53))
fit_ctrl_yhd <- trainControl(method = "boot", number = 1000)
fit_tr <- train(Residuary_Resistance~.,data=train_y_hd,trControl=fit_ctrl_yhd,method="glmboost")
fit_tr
names(fit_tr)
cat("Training RMSE Resampling results of bootstrap Linear Model: ",fit_tr$results$RMSE)
cat("Training Rsquared Resampling results of bootstrap Linear Model: ",fit_tr$results$Rsquared)
histogram(fit_tr$results$RMSE,xlab="RMSE")
cat("Mean RMSE for the model fit: ",mean(fit_tr$results$RMSE))
cat("Mean Rsquared for the model fit: ",mean(fit_tr$results$Rsquared))
Activity_test_yhd <- predict(fit_tr, newdata = test_y_hd)
head(test_y_hd$Residuary_Resistance)
head(Activity_test_yhd)
res_yhd_bs <- (Activity_test_yhd-test_y_hd$Residuary_Resistance)
mse_yhd_bs <- mean(res_yhd_bs^2)
cat("MSE of the test data using bootstrap model: ",mse_yhd_bs)
cat("RMSE of the test data using bootstrap model: ",sqrt(mse_yhd_bs))
RSS_v_boot <-sum(res_yhd_bs^2)
TSS_v_boot <-sum((test_y_hd$Residuary_Resistance-mean(test_y_hd$Residuary_Resistance))^2)
cat("Rsquared value of the test data using bootstrap model: ",(1-(RSS_v_boot/TSS_v_boot)))
url_German_credit <- "https://archive.ics.uci.edu/ml/machine-learning-databases/statlog/german/german.data-numeric"
data_german_credit <- read.csv(url_German_credit,header = F,sep="")
str(data_german_credit)
set.seed(100)
index_german_credit <- createDataPartition(data_german_credit$V25, p = 0.8,list = F)
train_german_credit <- data_german_credit[index_german_credit,]
test_german_credit <- data_german_credit[-index_german_credit,]
logistic_german_credit <- glm(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19,data = train_german_credit)
summary(logistic_german_credit)
names(logistic_german_credit)
RSquared_german_ct <- 1-(logistic_german_credit$deviance/logistic_german_credit$null.deviance)
residuals_german_credit <- logistic_german_credit$residuals
MSE_german_credit <- mean(residuals_german_credit^2)
RMSE_german_credit <- sqrt(MSE_german_credit)
cat("The R squared value of the model using train data is: ",RSquared_german_ct)
cat("Mean of residual square error using train dataset is: ",MSE_german_credit)
cat("Root Mean of residual square error using train dataset is: ",sqrt(MSE_german_credit))
cat("Sum of residual square error using train dataset is: ",sum(residuals_german_credit^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(residuals_german_credit^2)/logistic_german_credit$df.residual))
predict_german_ct_tt <- predict(logistic_german_credit,test_german_credit, interval="prediction")
residual_gc_test_lin <- predict_german_ct_tt - test_german_credit$V25
MSE_gc_test_lin <- mean(residual_gc_test_lin^2)
RMSE_gc_test_lin <- sqrt(MSE_gc_test_lin)
RSS_gc_test_lin <- sum(residual_gc_test_lin^2)
TSS_gc_test_lin <- sum((test_german_credit$V25-mean(test_german_credit$V25))^2)
cat("The R squared value of the model using test data is: ",1-(RSS_gc_test_lin/TSS_gc_test_lin))
cat("Mean of residual square error using test dataset is: ",MSE_gc_test_lin)
cat("Root Mean of residual square error using test dataset is: ",RMSE_gc_test_lin)
cat("Sum of residual square error using test dataset is: ",RSS_gc_test_lin)
cat("Residual standard error using test dataset is: ",sqrt(RSS_gc_test_lin/189))
K_10_german_ct <- trainControl(method="cv", number=10)
Model_K_10_gt <- train(V25~V1+V2+V3+V5+V11+V15+V16+V17+V18+V19, data= train_german_credit, trControl=K_10_german_ct, method="glm")
Model_K_10_gt
names(Model_K_10_gt)
cat("Mean RMSE for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$RMSE))
cat("Mean Rsquare for the K-fold(10) cross validation: ",mean(Model_K_10_gt$resample$Rsquared))
pct_k10_tst <- predict(Model_K_10_gt, newdata = test_german_credit)
res_k10_tst <- pct_k10_tst - test_german_credit$V25
RSS_K10_tst <- sum(res_k10_tst^2)
TSS_K10_tst <- sum((test_german_credit$V25 - mean(test_german_credit$V25))^2)
cat("Mean of residual square error of the K10 cv model using test dataset is: ",mean(res_k10_tst^2))
cat("Root Mean of residual square error of the K10 cv model using test dataset is: ",sqrt(mean(res_k10_tst^2)))
cat("Sum of residual square error using of the K10 cv model test dataset is: ",sum(res_k10_tst^2))
cat("The R squared value of the K10 cv model using testset data is: ",1-(RSS_K10_tst/TSS_K10_tst))
data(mtcars)
head(mtcars)
str(mtcars)
set.seed(100)
index_mtcars <- createDataPartition(mtcars$mpg, p = 0.8,list = F)
train_mtcars<- mtcars[index_mtcars,]
test_mtcars <- mtcars[-index_mtcars,]
mtcars$am <- factor(mtcars$am)
lm_mtcars <- lm(mpg~.,data=train_mtcars)
summary(lm_mtcars)
summary_mtcars <-summary(lm_mtcars)
cat("The R squared value of the model using train data is: ",summary_mtcars$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_mtcars$adj.r.squared)
cat("Mean of residual square error using train dataset is: ",mean(summary_mtcars$residuals^2))
cat("Sum of residual square error using train dataset is: ",sum(summary_mtcars$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_mtcars$residuals^2)/17))
cat("F-statistic value using the train dataset with 10 predictors and 17 degrees of freedom is: ",summary_mtcars$fstatistic)
names(lm_mtcars)
cat("Associated coefficient value for the feature wt is: ",lm_mtcars$coefficients[6])
cat("Associated coefficient value for the feature hp is: ",lm_mtcars$coefficients[4])
plot(lm_mtcars,1)
predicted_values_linear_mtcars <- predict(lm_mtcars,test_mtcars, interval="prediction")
predicted_values_linear_mtcars
test_mtcars$mpg
residuals_linear_mtcars <- test_mtcars$mpg - predicted_values_linear_mtcars[,1]
cat("Mean of residual square error of the test dataset using linear model is: ",mean(residuals_linear_mtcars^2))
grid_ridge=10^seq(10,-2,length=100)
x_ridge=model.matrix(mpg~.,mtcars)[,-1]
y_ridge=mtcars$mpg
ridge_mtcars=glmnet(x_ridge[index_mtcars,],y_ridge[index_mtcars],alpha=0,lambda=grid_ridge,thresh=1e-12)
plot(ridge_mtcars)
ridge_mtcars_min=cv.glmnet(x_ridge[index_mtcars,],y_ridge[index_mtcars],alpha=0,parallel=TRUE)
plot(ridge_mtcars_min)
names(ridge_mtcars_min)
cat("The minimum value obtained for lambda is: ",ridge_mtcars_min$lambda.min)
ridge_mc_predict=predict(ridge_mtcars,s=ridge_mtcars_min$lambda.min,newx=x_ridge[-index_mtcars,])
ridge_mc_predict
test_mtcars[,1]
cat("Out of sample test MSE using ridge regression is : ",mean((ridge_mc_predict-test_mtcars[,1])^2))
out_ridge=glmnet(x_ridge,y_ridge,alpha=0)
redge.coef=predict(out_ridge,type="coefficients",s=ridge_mtcars_min$lambda.min)
redge.coef
lm_mtcars$coefficients
data("swiss")
head(swiss)
str(swiss)
set.seed(1)
index_swiss <- createDataPartition(swiss$Fertility, p = 0.8,list = F)
train_swiss <- swiss[index_swiss,]
test_swiss <- swiss[-index_swiss,]
lm_swiss <- lm(Fertility~.,data=train_swiss)
summary(lm_swiss)
summary_swiss <-summary(lm_swiss)
cat("The R squared value of the model using train data is: ",summary_swiss$r.squared)
cat("The adjusted R squared value of the model using train data is: ",summary_swiss$adj.r.squared)
cat("Mean of residual square error using train dataset is: ",mean(summary_swiss$residuals^2))
cat("Sum of residual square error using train dataset is: ",sum(summary_swiss$residuals^2))
cat("Residual standard error using train dataset is: ",sqrt(sum(summary_swiss$residuals^2)/33))
cat("F-statistic value using the train dataset with 5 predictors and 33 degrees of freedom is: ",summary_swiss$fstatistic)
names(lm_swiss)
cat("Associated coefficient value for the feature Education is: ",lm_swiss$coefficients[4])
cat("Associated coefficient value for the feature Catholic is: ",lm_swiss$coefficients[5])
cat("Associated coefficient value for the feature Infant.Mortality is: ",lm_swiss$coefficients[6])
plot(lm_swiss,1)
predicted_values_linear <- predict(lm_swiss,test_swiss, interval="prediction")
predicted_values_linear
test_swiss$Fertility
residuals_linear <- test_swiss$Fertility - predicted_values_linear[,1]
cat("Mean of residual square error of the test dataset using linear model is: ",mean(residuals_linear^2))
grid=10^seq(10,-2,length=100)
x=model.matrix(Fertility~.,swiss)[,-1]
y=swiss$Fertility
lasso_swiss=glmnet(x[index_swiss,],y[index_swiss],alpha=1,lambda=grid)
plot(lasso_swiss)
lasso_swiss_min=cv.glmnet(x[index_swiss,],y[index_swiss],alpha=1,parallel=TRUE)
plot(lasso_swiss_min)
names(lasso_swiss_min)
cat("The minimum value obtained for lambda is: ",lasso_swiss_min$lambda.min)
lasso_predict=predict(lasso_swiss,s=lasso_swiss_min$lambda.min,newx=x[-index_swiss,])
lasso_predict
test_swiss[,1]
cat("Out of sample test MSE using Lasso regression is : ",mean((lasso_predict-test_swiss[,1])^2))
out=glmnet(x,y,alpha=1,lambda=grid)
lasso.coef=predict(out,type="coefficients",s=lasso_swiss_min$lambda.min)[1:6,]
lasso.coef
lm_swiss$coefficients
rm(list=ls())
setwd("E:/IIT CHICAGO STUDIES/IIT Chicago semester 2/Data Mining/Assignments/Assignment4/ml-latest-small")
data_rating <- read.csv("ratings.csv",header = TRUE,sep = ",")
which(data_rating$userId==1)
data_rating$movieId[which(data_rating$userId==1)]
for(i in 1:671){
data_rating$movieId[which(data_rating$userId==1)]
}
data_movies <- read.csv("movies.csv",header = TRUE,sep=",")
data_movies$title[data_rating$movieId[which(data_rating$userId==1)]]
data_rating$movieId[which(data_rating$userId==1)]
